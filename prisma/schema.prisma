generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model challenge_participants {
  id           Int        @id @default(autoincrement())
  user_id      Int?
  challenge_id Int
  joined_at    DateTime   @default(now()) @db.Timestamp(6)
  challenges   challenges @relation(fields: [challenge_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users        users?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, challenge_id])
}

model challenges {
  id                     Int                      @id @default(autoincrement())
  title                  String
  description            String
  start_date             DateTime                 @db.Timestamp(6)
  end_date               DateTime?                @db.Timestamp(6)
  created_at             DateTime                 @db.Timestamp(6)
  creator_id             Int?
  challenge_participants challenge_participants[]
  users                  users?                   @relation(fields: [creator_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  comments               comments[]
}

model comments {
  id           Int        @id @default(autoincrement())
  user_id      Int?
  challenge_id Int
  content      String
  created_at   DateTime   @default(now()) @db.Timestamp(6)
  challenges   challenges @relation(fields: [challenge_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users        users?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  likes        likes[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model likes {
  id           Int        @id @default(autoincrement())
  user_id      Int
  comment_id   Int
  created_at   DateTime   @default(now()) @db.Timestamp(6)
  comments     comments   @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users        users      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, comment_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id                     Int                      @id @default(autoincrement())
  username               String                   @unique @db.VarChar(25)
  password               String
  first_name             String
  last_name              String
  email                  String                   @unique
  challenge_participants challenge_participants[]
  challenges             challenges[]
  comments               comments[]
  likes                  likes[]
}
